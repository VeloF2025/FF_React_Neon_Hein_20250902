/**
 * Core Database Schema - Essential FibreFlow Tables
 * These are the fundamental tables required for the application to function
 */

import {
  pgTable,
  text,
  varchar,
  timestamp,
  uuid,
  boolean,
  integer,
  decimal,
  jsonb,
  type PgTableWithColumns,
  date,
  index,
} from 'drizzle-orm/pg-core';
import { sql } from 'drizzle-orm';

// ==================== USERS ====================
export const users = pgTable('users', {
  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),
  email: varchar('email', { length: 255 }).notNull().unique(),
  password: varchar('password', { length: 255 }),
  firstName: varchar('first_name', { length: 100 }),
  lastName: varchar('last_name', { length: 100 }),
  role: varchar('role', { length: 50 }).default('user'),
  permissions: jsonb('permissions').default('[]'),
  isActive: boolean('is_active').default(true),
  lastLogin: timestamp('last_login'),
  profilePicture: text('profile_picture'),
  phoneNumber: varchar('phone_number', { length: 20 }),
  department: varchar('department', { length: 100 }),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  emailIdx: index('users_email_idx').on(table.email),
  roleIdx: index('users_role_idx').on(table.role),
}));

// ==================== CLIENTS ====================
export const clients = pgTable('clients', {
  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),
  companyName: varchar('company_name', { length: 255 }).notNull(),
  contactPerson: varchar('contact_person', { length: 255 }),
  email: varchar('email', { length: 255 }),
  phone: varchar('phone', { length: 20 }),
  alternatePhone: varchar('alternate_phone', { length: 20 }),
  address: text('address'),
  city: varchar('city', { length: 100 }),
  state: varchar('state', { length: 100 }),
  country: varchar('country', { length: 100 }).default('USA'),
  postalCode: varchar('postal_code', { length: 20 }),
  website: varchar('website', { length: 255 }),
  industry: varchar('industry', { length: 100 }),
  clientType: varchar('client_type', { length: 50 }).default('standard'),
  status: varchar('status', { length: 20 }).default('active'),
  contractValue: decimal('contract_value', { precision: 15, scale: 2 }),
  paymentTerms: varchar('payment_terms', { length: 100 }),
  taxId: varchar('tax_id', { length: 50 }),
  notes: text('notes'),
  metadata: jsonb('metadata').default('{}'),
  createdBy: uuid('created_by').references(() => users.id),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  companyNameIdx: index('clients_company_name_idx').on(table.companyName),
  statusIdx: index('clients_status_idx').on(table.status),
  clientTypeIdx: index('clients_type_idx').on(table.clientType),
}));

// ==================== PROJECTS ====================
export const projects = pgTable('projects', {
  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),
  projectCode: varchar('project_code', { length: 50 }).notNull().unique(),
  projectName: varchar('project_name', { length: 255 }).notNull(),
  clientId: uuid('client_id').references(() => clients.id),
  description: text('description'),
  projectType: varchar('project_type', { length: 50 }),
  status: varchar('status', { length: 20 }).default('planning'),
  priority: varchar('priority', { length: 20 }).default('medium'),
  startDate: date('start_date'),
  endDate: date('end_date'),
  actualStartDate: date('actual_start_date'),
  actualEndDate: date('actual_end_date'),
  budget: decimal('budget', { precision: 15, scale: 2 }),
  actualCost: decimal('actual_cost', { precision: 15, scale: 2 }),
  projectManager: uuid('project_manager').references(() => staff.id),
  teamLead: uuid('team_lead').references(() => staff.id),
  location: text('location'),
  latitude: decimal('latitude', { precision: 10, scale: 8 }),
  longitude: decimal('longitude', { precision: 11, scale: 8 }),
  progressPercentage: integer('progress_percentage').default(0),
  milestones: jsonb('milestones').default('[]'),
  deliverables: jsonb('deliverables').default('[]'),
  risks: jsonb('risks').default('[]'),
  documents: jsonb('documents').default('[]'),
  tags: jsonb('tags').default('[]'),
  metadata: jsonb('metadata').default('{}'),
  createdBy: uuid('created_by').references(() => users.id),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  projectCodeIdx: index('projects_code_idx').on(table.projectCode),
  clientIdx: index('projects_client_idx').on(table.clientId),
  statusIdx: index('projects_status_idx').on(table.status),
  managerIdx: index('projects_manager_idx').on(table.projectManager),
}));

// ==================== STAFF ====================
export const staff: PgTableWithColumns<{
  name: "staff";
  schema: undefined;
  columns: any;
  dialect: "pg";
}> = pgTable('staff', {
  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),
  employeeId: varchar('employee_id', { length: 50 }).notNull().unique(),
  userId: uuid('user_id').references(() => users.id),
  firstName: varchar('first_name', { length: 100 }).notNull(),
  lastName: varchar('last_name', { length: 100 }).notNull(),
  email: varchar('email', { length: 255 }).notNull().unique(),
  phone: varchar('phone', { length: 20 }),
  alternatePhone: varchar('alternate_phone', { length: 20 }),
  position: varchar('position', { length: 100 }),
  department: varchar('department', { length: 100 }),
  reportsTo: uuid('reports_to').references((): any => staff.id),
  joinDate: date('join_date'),
  contractType: varchar('contract_type', { length: 50 }).default('full-time'),
  status: varchar('status', { length: 20 }).default('active'),
  salary: decimal('salary', { precision: 12, scale: 2 }),
  hourlyRate: decimal('hourly_rate', { precision: 8, scale: 2 }),
  skills: jsonb('skills').default('[]'),
  certifications: jsonb('certifications').default('[]'),
  emergencyContact: jsonb('emergency_contact').default('{}'),
  address: text('address'),
  city: varchar('city', { length: 100 }),
  state: varchar('state', { length: 100 }),
  country: varchar('country', { length: 100 }).default('USA'),
  postalCode: varchar('postal_code', { length: 20 }),
  profilePicture: text('profile_picture'),
  documents: jsonb('documents').default('[]'),
  performanceRating: decimal('performance_rating', { precision: 3, scale: 2 }),
  currentProjectCount: integer('current_project_count').default(0),
  maxProjectCount: integer('max_project_count').default(5),
  metadata: jsonb('metadata').default('{}'),
  createdBy: uuid('created_by').references(() => users.id),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  employeeIdIdx: index('staff_employee_id_idx').on(table.employeeId),
  emailIdx: index('staff_email_idx').on(table.email),
  departmentIdx: index('staff_department_idx').on(table.department),
  statusIdx: index('staff_status_idx').on(table.status),
  reportsToIdx: index('staff_reports_to_idx').on(table.reportsTo),
}));

// ==================== SOW (Statement of Work) ====================
export const sow = pgTable('sow', {
  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),
  sowNumber: varchar('sow_number', { length: 50 }).notNull().unique(),
  projectId: uuid('project_id').references(() => projects.id),
  clientId: uuid('client_id').references(() => clients.id),
  title: varchar('title', { length: 255 }).notNull(),
  description: text('description'),
  scope: jsonb('scope').default('[]'),
  deliverables: jsonb('deliverables').default('[]'),
  timeline: jsonb('timeline').default('{}'),
  milestones: jsonb('milestones').default('[]'),
  budget: decimal('budget', { precision: 15, scale: 2 }),
  paymentSchedule: jsonb('payment_schedule').default('[]'),
  terms: text('terms'),
  assumptions: jsonb('assumptions').default('[]'),
  exclusions: jsonb('exclusions').default('[]'),
  status: varchar('status', { length: 20 }).default('draft'),
  version: integer('version').default(1),
  approvedBy: uuid('approved_by').references(() => users.id),
  approvedDate: timestamp('approved_date'),
  expiryDate: date('expiry_date'),
  documents: jsonb('documents').default('[]'),
  metadata: jsonb('metadata').default('{}'),
  createdBy: uuid('created_by').references(() => users.id),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  sowNumberIdx: index('sow_number_idx').on(table.sowNumber),
  projectIdx: index('sow_project_idx').on(table.projectId),
  clientIdx: index('sow_client_idx').on(table.clientId),
  statusIdx: index('sow_status_idx').on(table.status),
}));

// ==================== POLES ====================
export const poles = pgTable('poles', {
  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),
  poleNumber: varchar('pole_number', { length: 50 }).notNull(),
  projectId: uuid('project_id').references(() => projects.id),
  type: varchar('type', { length: 50 }),
  height: decimal('height', { precision: 5, scale: 2 }),
  material: varchar('material', { length: 50 }),
  status: varchar('status', { length: 20 }).default('pending'),
  installationDate: date('installation_date'),
  latitude: decimal('latitude', { precision: 10, scale: 8 }),
  longitude: decimal('longitude', { precision: 11, scale: 8 }),
  address: text('address'),
  notes: text('notes'),
  images: jsonb('images').default('[]'),
  inspectionData: jsonb('inspection_data').default('{}'),
  metadata: jsonb('metadata').default('{}'),
  createdBy: uuid('created_by').references(() => users.id),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  poleNumberIdx: index('poles_number_idx').on(table.poleNumber),
  projectIdx: index('poles_project_idx').on(table.projectId),
  statusIdx: index('poles_status_idx').on(table.status),
}));

// ==================== MEETINGS ====================
export const meetings = pgTable('meetings', {
  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),
  title: varchar('title', { length: 255 }).notNull(),
  description: text('description'),
  projectId: uuid('project_id').references(() => projects.id),
  meetingType: varchar('meeting_type', { length: 50 }),
  startTime: timestamp('start_time').notNull(),
  endTime: timestamp('end_time'),
  location: varchar('location', { length: 255 }),
  meetingLink: text('meeting_link'),
  organizer: uuid('organizer').references(() => users.id),
  attendees: jsonb('attendees').default('[]'),
  agenda: jsonb('agenda').default('[]'),
  minutes: text('minutes'),
  actionItems: jsonb('action_items').default('[]'),
  attachments: jsonb('attachments').default('[]'),
  status: varchar('status', { length: 20 }).default('scheduled'),
  recurrence: jsonb('recurrence'),
  metadata: jsonb('metadata').default('{}'),
  createdBy: uuid('created_by').references(() => users.id),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  projectIdx: index('meetings_project_idx').on(table.projectId),
  organizerIdx: index('meetings_organizer_idx').on(table.organizer),
  startTimeIdx: index('meetings_start_time_idx').on(table.startTime),
  statusIdx: index('meetings_status_idx').on(table.status),
}));

// ==================== TASKS ====================
export const tasks = pgTable('tasks', {
  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),
  taskCode: varchar('task_code', { length: 50 }).unique(),
  title: varchar('title', { length: 255 }).notNull(),
  description: text('description'),
  projectId: uuid('project_id').references(() => projects.id),
  assignedTo: uuid('assigned_to').references(() => users.id),
  assignedBy: uuid('assigned_by').references(() => users.id),
  priority: varchar('priority', { length: 20 }).default('medium'),
  status: varchar('status', { length: 20 }).default('pending'),
  category: varchar('category', { length: 50 }),
  dueDate: timestamp('due_date'),
  startDate: timestamp('start_date'),
  completedDate: timestamp('completed_date'),
  estimatedHours: decimal('estimated_hours', { precision: 6, scale: 2 }),
  actualHours: decimal('actual_hours', { precision: 6, scale: 2 }),
  progress: integer('progress').default(0),
  dependencies: jsonb('dependencies').default('[]'),
  subtasks: jsonb('subtasks').default('[]'),
  comments: jsonb('comments').default('[]'),
  attachments: jsonb('attachments').default('[]'),
  tags: jsonb('tags').default('[]'),
  metadata: jsonb('metadata').default('{}'),
  createdBy: uuid('created_by').references(() => users.id),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  projectIdx: index('tasks_project_idx').on(table.projectId),
  assignedToIdx: index('tasks_assigned_to_idx').on(table.assignedTo),
  statusIdx: index('tasks_status_idx').on(table.status),
  priorityIdx: index('tasks_priority_idx').on(table.priority),
  dueDateIdx: index('tasks_due_date_idx').on(table.dueDate),
}));

// Export all core tables
export const coreTables = {
  users,
  clients,
  projects,
  staff,
  sow,
  poles,
  meetings,
  tasks,
};